// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  role              Role      @default(STUDENT)
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  middleName        String    @map("middle_name")
  birthDate         DateTime? @map("birth_date")
  phone             String?
  canPublish        Boolean   @default(false) @map("can_publish")
  gender            Gender
  confirmed         Boolean   @default(false)
  avatarLink        String?   @map("avatar_link")
  newEmail          String?   @map("new_email")
  newEmailConfirmed Boolean   @default(true) @map("new_email_confirmed")

  studentInfo         Student?
  teacherInfo         Teacher?
  articles            Article[]
  news                News[]
  passwordResetTokens PasswordResetToken[]
  emailChangeTokens   EmailChangeToken[]
  registrationTokens  RegistrationToken[]
  articleComments     ArticleComment[]
  articleLikes        ArticleLike[]
  articleDislikes     ArticleDislike[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Student {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [id], references: [id])

  educationalInstitution String? @map("educational_institution")
  grade                  Int?
  teachers               String?

  courses                    Course[]
  teacherRatings             TeacherRating[]
  olympiadsAttended          Olympiad[]
  myTeachers                 Teacher[]
  courseApplications         CourseApplication[]
  attendances                CourseAttendance[]
  courseReviews              CourseReview[]
  olympiadApplications       OlympiadApplication[]
  olympiadTaskAnswerAttempts OlympiadTaskAnswerAttempt[]
  olympiadReviews            OlympiadReview[]
  olympiadStepResults        OlympiadStepResult[]
  olympiadStepAttempts       OlympiadStepAttempt[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("students")
}

model Teacher {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [id], references: [id])

  rating              Float    @default(0)
  about               String?
  specialisations     String[] @map("specialisations")
  telegramLink        String?  @map("telegram_link")
  whatsappLink        String?  @map("whatsapp_link")
  viberLink           String?  @map("viber_link")
  vkLink              String?  @map("vk_link")
  skypeLink           String?  @map("skype_link")

  courses        Course[]
  studentsTaught Student[]
  ratings        TeacherRating[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teachers")
}

model TeacherRating {
  id Int @id @default(autoincrement())

  teacherId Int     @map("teacher_id")
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  rating Float @map("rating")

  studentId Int     @map("student_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teacher_ratings")
}

model News {
  id Int @id @default(autoincrement())

  authorId Int  @map("author_id")
  author   User @relation(fields: [authorId], references: [id])

  title       String @map("title")
  description String @map("description")
  content     String @map("content")
  imageLink   String @map("image_link")
  slug        String @unique @map("slug")

  tags NewsTag[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("news")
}

model NewsTag {
  id Int @id @default(autoincrement())

  name String @unique

  news News[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("news_tags")
}

model PasswordResetToken {
  id Int @id @default(autoincrement())

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  token     String      @unique
  ip        String
  browser   String
  status    TokenStatus @default(PENDING)
  expiresIn DateTime    @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("password_reset_tokens")
}

model EmailChangeToken {
  id Int @id @default(autoincrement())

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  ip        String
  token     String      @unique
  browser   String
  status    TokenStatus @default(PENDING)
  expiresIn DateTime    @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("email_change_tokens")
}

model RegistrationToken {
  id Int @id @default(autoincrement())

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  ip        String
  browser   String
  token     String      @unique
  status    TokenStatus @default(PENDING)
  expiresIn DateTime    @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("registration_tokens")
}

model Olympiad {
  id Int @id @default(autoincrement())

  name               String
  format             String
  participationType  OlympiadParticipationType @map("participation_type")
  grade              Int
  rating             Float                     @default(0)
  exampleTasksImages String[]                  @map("example_tasks_images")
  imageLink          String                    @map("image_link")
  rewards            String[]

  studentsAttended   Student[]
  steps              OlympiadStep[]
  tags               OlympiadTag[]
  reviews            OlympiadReview[]
  applications       OlympiadApplication[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiads")
}

model OlympiadApplication {
  id Int @id @default(autoincrement())

  olympiadId Int      @map("course_id")
  olympiad   Olympiad @relation(fields: [olympiadId], references: [id], onDelete: Cascade)

  studentId Int     @map("student_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  steps OlympiadStep[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_applications")
}

model OlympiadTag {
  id Int @id @default(autoincrement())

  name String @unique

  olympiads Olympiad[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_tags")
}

model OlympiadStep {
  id Int @id @default(autoincrement())

  olympiadId Int      @map("olympiad_id")
  olympiad   Olympiad @relation(fields: [olympiadId], references: [id])

  name        String
  step        Int
  startDate   DateTime @map("start_date")
  finishDate  DateTime @map("finish_date")
  description String

  applications OlympiadApplication[]
  tasks        OlympiadTask[]
  attempts     OlympiadStepAttempt[]
  results      OlympiadStepResult[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_steps")
}

model OlympiadStepResult {
  id Int @id @default(autoincrement())

  olympiadStepId Int          @map("olympiad_step_id")
  olympiadStep   OlympiadStep @relation(fields: [olympiadStepId], references: [id], onDelete: Cascade)

  studentId Int     @map("student_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  nextStepAvailiable Boolean @default(false) @map("next_step_availiable")
  place              Int     @default(0)
  points             Int     @default(0)


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_step_results")
}

model OlympiadStepAttempt {
  id Int @id @default(autoincrement())

  olympiadStepId Int          @map("olympiad_step_id")
  olympiadStep   OlympiadStep @relation(fields: [olympiadStepId], references: [id])

  studentId Int     @map("student_id")
  student   Student @relation(fields: [studentId], references: [id])

  attempts OlympiadTaskAnswerAttempt[]


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_step_attempts")
}

model OlympiadTask {
  id Int @id @default(autoincrement())

  olympiadStepId Int          @map("olympiad_step_id")
  olympiadStep   OlympiadStep @relation(fields: [olympiadStepId], references: [id], onDelete: Cascade)


  task        String
  description String?
  points      Int
  answerType  OlympiadTaskAnswerType @map("answer_type")

  variants    OlympiadTaskAnswerVariant[]
  attempts    OlympiadTaskAnswerAttempt[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_tasks")
}

model OlympiadTaskAnswerAttempt {
  id Int @id @default(autoincrement())

  olympiadTaskId Int          @map("olympiad_task_id")
  olympiadTask   OlympiadTask @relation(fields: [olympiadTaskId], references: [id], onDelete: Cascade)

  olympiadStepAttemptId Int @map("olympiad_step_attempt_id")
  olympiadStepAttempt   OlympiadStepAttempt @relation(fields: [olympiadStepAttemptId], references: [id], onDelete: Cascade)

  studentId Int     @map("student_id")
  student   Student @relation(fields: [studentId], references: [id])

  success Boolean @default(false)

  answers OlympiadTaskAnswerVariant[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_task_answer_attempts")
}

model OlympiadTaskAnswerVariant {
  id Int @id @default(autoincrement())

  olympiadTaskId Int          @map("olympiad_task_id")
  olympiadTask   OlympiadTask @relation(fields: [olympiadTaskId], references: [id], onDelete: Cascade)

  rightAnswer Boolean @map("right_answer")
  text        String?

  taskAttempts OlympiadTaskAnswerAttempt[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_task_answer_variants")
}

model OlympiadReview {
  id Int @id @default(autoincrement())

  olympiadId Int      @map("olympiad_id")
  olympiad   Olympiad @relation(fields: [olympiadId], references: [id], onDelete: Cascade)

  studentId Int     @map("student_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  status PublishingStatus @default(DRAFT)
  rating Float
  text   String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_reviews")
}

model Course {
  id Int @id @default(autoincrement())

  teacherId Int     @map("teacher_id")
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  name             String
  capacity         Int
  rating           Float    @default(0)
  grade            Int
  toWhom           String[] @map("to_whom")
  possibilities    String[]
  startDate        DateTime @map("start_date")
  placesAvailable  Int      @map("places_available")
  materialsLink    String   @map("materials_link")
  materialsCount   Int      @map("materials_count")
  price            Float
  imageLink        String   @map("image_link")
  eripNumber       String   @map("erip_number")
  finishDate       DateTime @map("finish_date")
  finished         Boolean  @default(false) @map("finished")

  steps        CourseEducationStep[]
  reviews      CourseReview[]
  attendances  CourseAttendance[]
  students     Student[]
  applications CourseApplication[]
  modules      CourseModule[]
  tags         CourseTag[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@map("courses")
}

model CourseModule {
  id Int @id @default(autoincrement())

  courseId Int    @map("course_id")
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  name        String
  description String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses_modules")
}

model CourseTag {
  id Int @id @default(autoincrement())

  name    String   @unique
  courses Course[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses_tags")
}

model CourseEducationStep {
  id Int @id @default(autoincrement())

  courseId Int    @map("course_id")
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  step         Int
  title        String
  description  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_education_steps")
}

model CourseApplication {
  id Int @id @default(autoincrement())

  courseId Int    @map("course_id")
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  studentId Int?     @map("student_id")
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  applicantName   String            @map("applicant_name")
  applicantPhone  String            @map("applicant_phone")
  status          ApplicationStatus @default(CREATED)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_applications")
}

model CourseAttendance {
  id Int @id @default(autoincrement())

  courseId Int    @map("course_id")
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  studentId Int     @map("student_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  status AttendanceStatus
  reason String?
  date   DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_attendances")
}

model CourseReview {
  id Int @id @default(autoincrement())

  courseId Int    @map("course_id")
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  studentId Int     @map("student_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  rating Float            @map("rating")
  status PublishingStatus @default(DRAFT)
  text   String


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_reviews")
}

model Article {
  id Int @id @default(autoincrement())

  authorId Int  @map("author_id")
  author   User @relation(fields: [authorId], references: [id])

  slug    String @unique
  title   String
  content String
  views   Int    @default(0)

  tags     ArticleTag[]
  status   PublishingStatus @default(DRAFT)
  comments ArticleComment[]
  likes    ArticleLike[]
  dislikes ArticleDislike[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("articles")
}

model ArticleLike {
  id Int @id @default(autoincrement())

  articleId Int     @map("article_id")
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("article_likes")
}

model ArticleDislike {
  id Int @id @default(autoincrement())

  articleId Int     @map("article_id")
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("article_dislikes")
}

model ArticleComment {
  id Int @id @default(autoincrement())

  articleId Int     @map("article_id")
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  authorId Int  @map("author_id")
  author   User @relation(fields: [authorId], references: [id])

  text String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("article_comments")
}

model ArticleTag {
  id Int @id @default(autoincrement())

  name String @unique

  articles Article[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("article_tags")
}

model FAQQuestion {
  id Int @id @default(autoincrement())

  question String
  answer   String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("faq_questions")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum Gender {
  MALE
  FEMALE
}

enum PublishingStatus {
  DRAFT
  PUBLISHED
}

enum ApplicationStatus {
  CREATED
  FULFILLED
  REJECTED
  PENDING
}

enum OlympiadParticipationType {
  FREE
  PAID
}

enum TokenStatus {
  PENDING
  FULFILLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  ABSENT_WITH_REASON
}

enum OlympiadTaskAnswerType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum OlympiadAttemptStatus {
  PENDING
  FULFILLED
}
