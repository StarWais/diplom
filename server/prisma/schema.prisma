// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  password            String
  role                Role                 @default(STUDENT)
  firstName           String               @map("first_name")
  lastName            String               @map("last_name")
  middleName          String               @map("middle_name")
  birthDate           DateTime?            @map("birth_date")
  phone               String?
  canPublish          Boolean              @default(false)
  gender              Gender
  confirmed           Boolean              @default(false)
  avatarLink          String?              @map("avatar_link")
  newEmail            String?              @map("new_email")
  newEmailConfirmed   Boolean              @default(true)
  studentInfo         Student?
  teacherInfo         Teacher?
  articles            Article[]
  news                News[]
  courseReviews       CourseReview[]
  olympiadReviews     OlympiadReview[]
  passwordResetTokens PasswordResetToken[]
  emailChangeTokens   EmailChangeToken[]
  registrationTokens  RegistrationToken[]
  articleComments     ArticleComment[]
  articleLikes        ArticleLike[]
  articleDislikes     ArticleDislike[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model News {
  id          Int       @id @default(autoincrement())
  title       String    @map("title")
  description String    @map("description")
  content     String    @map("content")
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int       @map("author_id")
  imageLink   String    @map("image_link")
  slug        String    @unique @map("slug")
  tags        NewsTag[]


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("news")
}

model NewsTag {
  id   Int    @id @default(autoincrement())
  news News[]
  name String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("news_tags")
}

model PasswordResetToken {
  id        Int         @id @default(autoincrement())
  token     String      @unique
  userId    Int         @map("user_id")
  ip        String
  browser   String
  status    TokenStatus @default(PENDING)
  user      User        @relation(fields: [userId], references: [id])
  expiresIn DateTime    @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("password_reset_tokens")
}

model EmailChangeToken {
  id        Int         @id @default(autoincrement())
  token     String      @unique
  userId    Int         @map("user_id")
  ip        String
  browser   String
  status    TokenStatus @default(PENDING)
  user      User        @relation(fields: [userId], references: [id])
  expiresIn DateTime    @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("email_change_tokens")
}

model RegistrationToken {
  id        Int         @id @default(autoincrement())
  token     String      @unique
  userId    Int         @map("user_id")
  ip        String
  browser   String
  status    TokenStatus @default(PENDING)
  user      User        @relation(fields: [userId], references: [id])
  expiresIn DateTime    @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("registration_tokens")
}

model Olympiad {
  id                Int                       @id @default(autoincrement())
  name              String
  format            String
  participationType OlympiadParticipationType
  grade             Int
  rating            Float                     @default(0)
  exampleTasksImages String[]                 @map("example_tasks_images")
  imageLink         String                @map("image_link")
  steps             OlympiadStep[]
  tags              OlympiadTag[]
  reviews           OlympiadReview[]
  rewards           String[]
  applications      OlympiadApplication[]


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@map("olympiads")
}

model OlympiadApplication {
  id         Int               @id @default(autoincrement())
  olympiadId Int               @map("course_id")
  olympiad   Olympiad          @relation(fields: [olympiadId], references: [id], onDelete: Cascade)
  studentId  Int               @map("student_id")
  student    Student           @relation(fields: [studentId], references: [id])
  steps      OlympiadStep[]
  status     ApplicationStatus @default(CREATED)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_applications")
}

model OlympiadTag {
  id   Int    @id @default(autoincrement())
  olympiads Olympiad[]
  name String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_tags")
}

model OlympiadStep {
  id          Int      @id @default(autoincrement())
  name        String
  step        Int
  startDate   DateTime @map("start_date")
  finishDate  DateTime      @map("finish_date")
  description String

  olympiadId Int      @map("olympiad_id")
  olympiad   Olympiad @relation(fields: [olympiadId], references: [id])

  applications OlympiadApplication[]

  tasks        OlympiadTask[]
  attempts     OlympiadStepAttempt[]
  results      OlympiadStepResult[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_steps")
}

model OlympiadStepResult {
  id                 Int          @id @default(autoincrement())
  olympiadStepId     Int          @map("olympiad_step_id")
  olympiadStep       OlympiadStep @relation(fields: [olympiadStepId], references: [id])
  studentId          Int          @map("student_id")
  student            Student      @relation(fields: [studentId], references: [id])
  nextStepAvailiable Boolean      @default(false)
  place              Int          @default(0)


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@map("olympiad_step_results")
}

model OlympiadStepAttempt {
  id             Int          @id @default(autoincrement())
  olympiadStepId Int          @map("olympiad_step_id")
  olympiadStep   OlympiadStep @relation(fields: [olympiadStepId], references: [id])

  studentId Int     @map("student_id")
  student   Student @relation(fields: [studentId], references: [id])

  attempts OlympiadTaskAnswerAttempt[]


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@map("olympiad_step_attempts")
}

model OlympiadTask {
  id             Int                         @id @default(autoincrement())
  olympiadStepId Int                         @map("olympiad_step_id")
  olympiadStep   OlympiadStep                @relation(fields: [olympiadStepId], references: [id])
  task           String
  description    String?
  answerType     OlympiadTaskAnswerType
  variants       OlympiadTaskAnswerVariant[]
  attempts       OlympiadTaskAnswerAttempt[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@map("olympiad_tasks")
}

model OlympiadTaskAnswerAttempt {
  id             Int          @id @default(autoincrement())

  olympiadTaskId Int          @map("olympiad_task_id")
  olympiadTask   OlympiadTask @relation(fields: [olympiadTaskId], references: [id])

  olympiadStepAttemptId Int?
  olympiadStepAttempt   OlympiadStepAttempt? @relation(fields: [olympiadStepAttemptId], references: [id])

  studentId Int     @map("student_id")
  student   Student @relation(fields: [studentId], references: [id])

  answers OlympiadTaskAnswerVariant[]
  success Boolean                     @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_task_answer_attempts")

}

model OlympiadTaskAnswerVariant {
  id             Int          @id @default(autoincrement())
  olympiadTaskId Int          @map("olympiad_task_id")
  olympiadTask   OlympiadTask @relation(fields: [olympiadTaskId], references: [id])

  taskAttempts OlympiadTaskAnswerAttempt[]

  rightAnswer Boolean
  points      Int
  text        String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_task_answer_variants")
}

model OlympiadReview {
  id         Int      @id @default(autoincrement())
  olympiadId Int      @map("olympiad_id")
  olympiad   Olympiad @relation(fields: [olympiadId], references: [id], onDelete: Cascade)
  authorId   Int      @map("author_id")
  published  Boolean  @default(false)
  author     User     @relation(fields: [authorId], references: [id])
  rating     Float
  text       String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("olympiad_reviews")
}

model Course {
  id             Int                   @id @default(autoincrement())
  name           String
  teacherId      Int                   @map("teacher_id")
  teacher        Teacher               @relation(fields: [teacherId], references: [id])
  capacity       Int
  attendances    CourseAttendance[]
  students       Student[]
  rating         Float                 @default(0)
  grade          Int
  toWhom         String[]              @map("to_whom")
  possibilities  String[]
  steps          CourseEducationStep[]
  reviews        CourseReview[]
  startDate      DateTime              @map("start_date")
  materialsLink  String                @map("materials_link")
  materialsCount Int                   @map("materials_count")
  price          Float
  imageLink      String                @map("image_link")
  eripNumber     String                @map("erip_number")
  finishDate     DateTime              @map("finish_date")
  finished       Boolean               @default(false) @map("finished")
  applications   CourseApplication[]
  modules        CourseModule[]
  tags           CourseTag[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@map("courses")
}

model CourseModule {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  courseId    Int    @map("course_id")
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

}

model CourseTag {
  id      Int      @id @default(autoincrement())
  courses Course[]
  name    String   @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses_tags")
}

model CourseEducationStep {
  id       Int    @id @default(autoincrement())
  courseId Int    @map("course_id")
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  step     Int
  title    String
  text     String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_education_steps")
}

model CourseApplication {
  id              Int               @id @default(autoincrement())
  courseId        Int               @map("course_id")
  appliciantName  String            @map("appliciant_name")
  appliciantPhone String            @map("appliciant_phone")
  course          Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studentId       Int?              @map("student_id")
  student         Student?          @relation(fields: [studentId], references: [id])
  status          ApplicationStatus @default(CREATED)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_applications")
}

model CourseAttendance {
  id        Int              @id @default(autoincrement())
  courseId  Int              @map("course_id")
  studentId Int              @map("student_id")
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  status    AttendanceStatus
  date      DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_attendances")
}

model CourseReview {
  id        Int     @id @default(autoincrement())
  courseId  Int     @map("course_id")
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  authorId  Int     @map("author_id")
  rating    Float   @map("rating")
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  text      String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_reviews")
}

model TeacherRating {
  id        Int     @id @default(autoincrement())
  teacherId Int     @map("teacher_id")
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  studentId Int     @map("student_id")
  rating    Float   @map("rating")
  student   Student @relation(fields: [studentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teacher_ratings")
}

model Student {
  id                         Int                         @id @default(autoincrement())
  userId                     Int                         @unique @map("user_id")
  user                       User                        @relation(fields: [userId], references: [id])
  educationalInstitution     String?                     @map("educational_institution")
  grade                      Int?
  teachers                   String?
  courses                    Course[]
  teacherRatings             TeacherRating[]
  courseApplications         CourseApplication[]
  olympiadApplications       OlympiadApplication[]
  olympiadTaskAnswerAttempts OlympiadTaskAnswerAttempt[]
  attendances                CourseAttendance[]
  olympiadStepResults  OlympiadStepResult[]
  olympiadStepAttempts OlympiadStepAttempt[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("students")
}

model Teacher {
  id                  Int             @id @default(autoincrement())
  userId              Int             @unique @map("user_id")
  user                User            @relation(fields: [userId], references: [id])
  courses             Course[]
  rating              Float           @default(0)
  about               String?
  ratings             TeacherRating[]
  specialisations     String[]        @map("specialisation")
  studentsTaughtCount Int             @default(0) @map("students_teached_count")
  telegramLink        String?         @map("telegram_link")
  whatsappLink        String?         @map("whatsapp_link")
  viberLink           String?         @map("viber_link")
  vkLink              String?         @map("vk_link")
  skypeLink           String?         @map("skype_link")


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teachers")
}

model Article {
  id       Int              @id @default(autoincrement())
  title    String
  slug     String           @unique
  content  String
  authorId Int              @map("author_id")
  author   User             @relation(fields: [authorId], references: [id])
  tags     ArticleTag[]
  views    Int              @default(0)
  status   ArticleStatus
  comments ArticleComment[]
  likes    ArticleLike[]
  dislikes ArticleDislike[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@map("articles")
}

model ArticleLike {
  id        Int     @id @default(autoincrement())
  articleId Int     @map("article_id")
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("article_likes")
}

model ArticleDislike {
  id        Int     @id @default(autoincrement())
  articleId Int     @map("article_id")
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("article_dislikes")
}

model ArticleComment {
  id        Int      @id @default(autoincrement())
  articleId Int      @map("article_id")
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  authorId  Int      @map("author_id")
  author    User     @relation(fields: [authorId], references: [id])
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("article_comments")
}

model ArticleTag {
  id       Int       @id @default(autoincrement())
  articles Article[]
  name     String    @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("article_tags")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum Gender {
  MALE
  FEMALE
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

enum ApplicationStatus {
  CREATED
  FULFILLED
  REJECTED
  PENDING
}

enum OlympiadParticipationType {
  FREE
  PAID
}

enum TokenStatus {
  PENDING
  FULFILLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  ABSENT_WITH_REASON
}

enum OlympiadTaskAnswerType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum OlympiadAttemptStatus {
  PENDING
  FULFILLED
}
